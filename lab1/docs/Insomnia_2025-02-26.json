{"_type":"export","__export_format":4,"__export_date":"2025-02-26T14:19:43.189Z","__export_source":"insomnia.desktop.app:v10.3.1","resources":[{"_id":"req_67e29fec8a0a45fc82c5ef69985946c3","parentId":"fld_6beca7c019d645cbb04de53984fd1453","modified":1740579477948,"created":1740493912479,"url":"{{ _.base_url }}/api/courses/enroll","name":"Записаться на курс (но мы уже были записаны)","description":"Позволяет пользователю записаться на доступный курс","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"userId\": 1,\n  \"courseId\": 1\n}"},"parameters":[],"headers":[{"disabled":false,"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1740493912479,"isPrivate":false,"afterResponseScript":"const response = insomnia.response;\nconst body = response.json();\n\ninsomnia.test('Status code is 400', () => {\n  insomnia.expect(response.code).to.equal(400);\n});\n\ninsomnia.test('Response has success property set to true', () => {\n  insomnia.expect(body.success).to.equal(false);\n});\n\ninsomnia.test('Response contains success message', () => {\n  insomnia.expect(body.message).to.equal('User is already enrolled in this course');\n});\n\ninsomnia.test('Response time is reasonable', () => {\n  insomnia.expect(response.responseTime).to.be.below(1000);\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_6beca7c019d645cbb04de53984fd1453","parentId":"wrk_b87015e768ff4ae2a3ac5aee0e186765","modified":1740579477936,"created":1740493912474,"name":"Запись на курсы","description":"API для управления записью студентов на курсы","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1740493912575,"_type":"request_group"},{"_id":"wrk_b87015e768ff4ae2a3ac5aee0e186765","parentId":null,"modified":1740579477953,"created":1740493580207,"name":"BLPS lab1","description":"","scope":"collection","_type":"workspace"},{"_id":"req_20e5ea674e81477a9d394524dc030ebb","parentId":"fld_6beca7c019d645cbb04de53984fd1453","modified":1740579477942,"created":1740507738680,"url":"{{ _.base_url }}/api/courses/enroll","name":"Записаться на курс","description":"Позволяет пользователю записаться на доступный курс","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"userId\": 2,\n  \"courseId\": 2\n}"},"parameters":[],"headers":[{"disabled":false,"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1740493912478.5,"isPrivate":false,"afterResponseScript":"const response = insomnia.response;\nconst body = response.json();\n\ninsomnia.test('Status code is 200', () => {\n  insomnia.expect(response.code).to.equal(200);\n});\n\ninsomnia.test('Response has success property set to true', () => {\n  insomnia.expect(body.success).to.equal(true);\n});\n\ninsomnia.test('Response contains success message', () => {\n  insomnia.expect(body.message).to.equal('Successfully enrolled in course');\n});\n\ninsomnia.test('Response time is reasonable', () => {\n  insomnia.expect(response.responseTime).to.be.below(500);\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_b4b8512752ba46cf8dfb1e53cb693521","parentId":"fld_6beca7c019d645cbb04de53984fd1453","modified":1740579477950,"created":1740507955585,"url":"{{ _.base_url }}/api/courses/enroll","name":"Записаться на курс (но курса не существует)","description":"Позволяет пользователю записаться на доступный курс","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"userId\": 2,\n  \"courseId\": 10\n}"},"parameters":[],"headers":[{"disabled":false,"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1740493912478.25,"isPrivate":false,"afterResponseScript":"const response = insomnia.response;\nconst body = response.json();\n\ninsomnia.test('Status code is 400', () => {\n  insomnia.expect(response.code).to.equal(400);\n});\n\ninsomnia.test('Response has success property set to true', () => {\n  insomnia.expect(body.success).to.equal(false);\n});\n\ninsomnia.test('Response contains success message', () => {\n  insomnia.expect(body.message).to.equal('The requested course does not exist');\n});\n\ninsomnia.test('Response time is reasonable', () => {\n  insomnia.expect(response.responseTime).to.be.below(500);\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_03b94c8aa2034409b9119344efe09672","parentId":"fld_6beca7c019d645cbb04de53984fd1453","modified":1740579477939,"created":1740507999475,"url":"{{ _.base_url }}/api/courses/enroll","name":"Записаться на курс (но пользователя не существует)","description":"Позволяет пользователю записаться на доступный курс","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"userId\": 11,\n  \"courseId\": 1\n}"},"parameters":[],"headers":[{"disabled":false,"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1740493912478.125,"isPrivate":false,"afterResponseScript":"const response = insomnia.response;\nconst body = response.json();\n\ninsomnia.test('Status code is 400', () => {\n  insomnia.expect(response.code).to.equal(400);\n});\n\ninsomnia.test('Response has success property set to true', () => {\n  insomnia.expect(body.success).to.equal(false);\n});\n\ninsomnia.test('Response contains success message', () => {\n  insomnia.expect(body.message).to.equal('User not found');\n});\n\ninsomnia.test('Response time is reasonable', () => {\n  insomnia.expect(response.responseTime).to.be.below(500);\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_ec50114b01dc4e1ebcda4ccd3b52b068","parentId":"fld_6beca7c019d645cbb04de53984fd1453","modified":1740579477952,"created":1740508049966,"url":"{{ _.base_url }}/api/courses/enroll","name":"Записаться на курс (но курс закрыт)","description":"Позволяет пользователю записаться на доступный курс","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"userId\": 1,\n  \"courseId\": 3\n}"},"parameters":[],"headers":[{"disabled":false,"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1740493912478.0625,"isPrivate":false,"afterResponseScript":"const response = insomnia.response;\nconst body = response.json();\n\ninsomnia.test('Status code is 400', () => {\n  insomnia.expect(response.code).to.equal(400);\n});\n\ninsomnia.test('Response has success property set to true', () => {\n  insomnia.expect(body.success).to.equal(false);\n});\n\ninsomnia.test('Response contains success message', () => {\n  insomnia.expect(body.message).to.equal('This course is currently not available for enrollment');\n});\n\ninsomnia.test('Response time is reasonable', () => {\n  insomnia.expect(response.responseTime).to.be.below(500);\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_37237118a3954dd99b9191ec6129577d","parentId":"fld_e6ceb2f5fb14431d94d94cd5112f0885","modified":1740579477943,"created":1740493912484,"url":"{{ _.base_url }}/api/tasks/1/submissions","name":"Получить ответы студента","description":"Возвращает список ответов конкретного студента на задание","method":"GET","body":{},"parameters":[{"disabled":false,"id":"pair_03625e795a204cbb9061f82e76af4c12","name":"userId","value":"1"}],"headers":[],"authentication":{},"preRequestScript":"","metaSortKey":-1740493912483.5,"isPrivate":false,"pathParameters":[],"afterResponseScript":"const response = insomnia.response;\nconst body = response.json();\n\ninsomnia.test('Status code is 200', () => {\n  insomnia.expect(response.code).to.equal(200);\n});\n\ninsomnia.test('Response has success property set to true', () => {\n  insomnia.expect(body[0].success).to.equal(true);\n});\n\ninsomnia.test('Response contains success message', () => {\n  insomnia.expect(body[0].message).to.equal('Submission graded');\n});\n\ninsomnia.test('Score count', ()=>{\n\tinsomnia.expect(body[0].score).to.equal(10);\n});\n\ninsomnia.test('Response time is reasonable', () => {\n  insomnia.expect(response.responseTime).to.be.below(500);\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_e6ceb2f5fb14431d94d94cd5112f0885","parentId":"wrk_b87015e768ff4ae2a3ac5aee0e186765","modified":1740579477938,"created":1740493912475,"name":"Задания","description":"API для работы с заданиями курса","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1740493912475,"_type":"request_group"},{"_id":"req_39122f462e02458c8484272b37fb3722","parentId":"fld_e6ceb2f5fb14431d94d94cd5112f0885","modified":1740579477944,"created":1740493912483,"url":"{{ _.base_url }}/api/tasks/3/unscored","name":"Получить неоцененные ответы","description":"Возвращает список неоцененных ответов студентов на задание","method":"GET","body":{},"parameters":[{"description":"","disabled":false,"id":"pair_d6d3da56cb7a46c9be171964f6fc88dd","name":"","value":""}],"headers":[],"authentication":{},"metaSortKey":-1740493912483,"isPrivate":false,"pathParameters":[],"afterResponseScript":"const response = insomnia.response;\nconst submissions = response.json();\n\ninsomnia.test('Status code is 200', () => {\n    insomnia.expect(response.code).to.equal(200);\n});\n\ninsomnia.test('Response is an array', () => {\n    insomnia.expect(Array.isArray(submissions)).to.equal(true);\n});\n\ninsomnia.test('Response contains exactly 1 submission', () => {\n    insomnia.expect(submissions).to.have.lengthOf(1);\n});\n\ninsomnia.test('Submissions have all required fields', () => {\n    submissions.forEach(submission => {\n        insomnia.expect(submission).to.have.all.keys(\n            'submissionId',\n            'taskId',\n            'studentId',\n            'studentUsername',\n            'answer',\n            'maxScore'\n        );\n    });\n});\n\ninsomnia.test('Submission data is correct', () => {\n    const secondSubmission = submissions[0];\n    insomnia.expect(secondSubmission.submissionId).to.equal(6);\n    insomnia.expect(secondSubmission.taskId).to.equal(3);\n    insomnia.expect(secondSubmission.studentId).to.equal(2);\n    insomnia.expect(secondSubmission.studentUsername).to.equal('student2');\n    insomnia.expect(secondSubmission.answer).to.equal(\n        'OOP is a programming paradigm that uses objects and classes.'\n    );\n    insomnia.expect(secondSubmission.maxScore).to.equal(25);\n});\n\ninsomnia.test('Submission fields have correct data types', () => {\n    submissions.forEach(submission => {\n        insomnia.expect(submission.submissionId).to.be.a('number');\n        insomnia.expect(submission.taskId).to.be.a('number');\n        insomnia.expect(submission.studentId).to.be.a('number');\n        insomnia.expect(submission.studentUsername).to.be.a('string');\n        insomnia.expect(submission.answer).to.be.a('string');\n        insomnia.expect(submission.maxScore).to.be.a('number');\n    });\n});\n\ninsomnia.test('Submission IDs are positive numbers', () => {\n    submissions.forEach(submission => {\n        insomnia.expect(submission.submissionId).to.be.above(0);\n    });\n});\n\ninsomnia.test('Max scores are positive numbers', () => {\n    submissions.forEach(submission => {\n        insomnia.expect(submission.maxScore).to.be.above(0);\n    });\n});\n\ninsomnia.test('Answers are not empty', () => {\n    submissions.forEach(submission => {\n        insomnia.expect(submission.answer.length).to.be.above(0);\n    });\n});\n\ninsomnia.test('Response time is reasonable', () => {\n    insomnia.expect(response.responseTime).to.be.below(500);\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_0ab02f2d9d6c4118900e403b8a7c3a89","parentId":"fld_e6ceb2f5fb14431d94d94cd5112f0885","modified":1740579477940,"created":1740493912482,"url":"{{ _.base_url }}/api/tasks/1","name":"Получить задание по ID","description":"Возвращает информацию о задании по указанному ID","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1740493912482,"isPrivate":false,"pathParameters":[],"afterResponseScript":"const response = insomnia.response;\nconst task = response.json();\n\ninsomnia.test('Status code is 200', () => {\n    insomnia.expect(response.code).to.equal(200);\n});\n\ninsomnia.test('Response is an object', () => {\n    insomnia.expect(task).to.be.an('object');\n});\n\ninsomnia.test('Task has all required fields', () => {\n    insomnia.expect(task).to.have.all.keys(\n        'id',\n        'title',\n        'description',\n        'type',\n        'maxScore'\n    );\n});\n\ninsomnia.test('Task data is correct', () => {\n    insomnia.expect(task.id).to.equal(1);\n    insomnia.expect(task.title).to.equal('Java Variables Quiz');\n    insomnia.expect(task.description).to.equal('Select the correct data type for storing decimal numbers');\n    insomnia.expect(task.type).to.equal('MULTIPLE_CHOICE');\n    insomnia.expect(task.maxScore).to.equal(10);\n});\n\ninsomnia.test('Task fields have correct data types', () => {\n    insomnia.expect(task.id).to.be.a('number');\n    insomnia.expect(task.title).to.be.a('string');\n    insomnia.expect(task.description).to.be.a('string');\n    insomnia.expect(task.type).to.be.a('string');\n    insomnia.expect(task.maxScore).to.be.a('number');\n});\n\ninsomnia.test('ID is a positive number', () => {\n    insomnia.expect(task.id).to.be.above(0);\n});\n\ninsomnia.test('Max score is a positive number', () => {\n    insomnia.expect(task.maxScore).to.be.above(0);\n});\n\ninsomnia.test('String fields are not empty', () => {\n    insomnia.expect(task.title.length).to.be.above(0);\n    insomnia.expect(task.description.length).to.be.above(0);\n});\n\ninsomnia.test('Task type is valid', () => {\n    insomnia.expect(task.type).to.be.oneOf([\n        'MULTIPLE_CHOICE',\n        'CHECKBOX',\n        'WRITTEN'\n    ]);\n});\n\ninsomnia.test('Response time is reasonable', () => {\n    insomnia.expect(response.responseTime).to.be.below(500); \n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_391711b0cdf44938bc52006b2e375c1c","parentId":"fld_e6ceb2f5fb14431d94d94cd5112f0885","modified":1740579477945,"created":1740493912478,"url":"{{ _.base_url }}/api/tasks/score","name":"Оценить ответ студента","description":"Позволяет преподавателю оценить ответ студента на задание","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"submissionId\": 6,\n  \"score\": 3\n}"},"parameters":[{"disabled":false,"id":"pair_b690ebb1e1984cf1bbda3ac754b68337","name":"teacherId","value":"1"}],"headers":[{"disabled":false,"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1740493912478,"isPrivate":false,"afterResponseScript":"const response = insomnia.response;\n\ninsomnia.test('Status code is 200', () => {\n  insomnia.expect(response.code).to.equal(200);\n});\n\ninsomnia.test('Response time is reasonable', () => {\n  insomnia.expect(response.responseTime).to.be.below(500);\n});\n\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_8af26b5f8dc94e07ad33f78235d9ee7e","parentId":"fld_e6ceb2f5fb14431d94d94cd5112f0885","modified":1740579477949,"created":1740493912476,"url":"{{ _.base_url }}/api/tasks/submit","name":"Отправить ответ на задание","description":"Позволяет студенту отправить ответ на задание","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"taskId\": 3,\n  \"userId\": 2,\n  \"answer\": \"baza\"\n}"},"parameters":[],"headers":[{"disabled":false,"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1740493912477.5,"isPrivate":false,"afterResponseScript":"const response = insomnia.response;\nconst body = response.json();\n\n\ninsomnia.test('Status code is 200', () => {\n    insomnia.expect(response.code).to.equal(200);\n});\n\ninsomnia.test('Response is a JSON object', () => {\n    insomnia.expect(body).to.be.an('object');\n});\n\ninsomnia.test('Response has all required fields', () => {\n    insomnia.expect(body).to.have.all.keys('success', 'message', 'score');\n});\n\ninsomnia.test('Success is true', () => {\n    insomnia.expect(body.success).to.be.equal(true);\n});\n\ninsomnia.test('Message indicates waiting for review', () => {\n    insomnia.expect(body.message).to.equal('Task submitted successfully. Waiting for teacher\\'s review.');\n});\n\ninsomnia.test('Score is null for written tasks', () => {\n    insomnia.expect(body.score).to.be.equal(null);\n});\n\ninsomnia.test('Fields have correct types', () => {\n    insomnia.expect(body.success).to.be.a('boolean');\n    insomnia.expect(body.message).to.be.a('string');\n    insomnia.expect(body.score).to.be.equal(null)\n});\n\n\n// Test response time\ninsomnia.test('Response time is reasonable', () => {\n    insomnia.expect(response.responseTime).to.be.below(500);\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_b3441c3948934732aa95e23a384de149","parentId":"fld_e6ceb2f5fb14431d94d94cd5112f0885","modified":1740579477950,"created":1740567133106,"url":"{{ _.base_url }}/api/tasks/3/unscored","name":"Получить неоцененные ответы (после оценки)","description":"Возвращает список неоцененных ответов студентов на задание","method":"GET","body":{},"parameters":[{"description":"","disabled":false,"id":"pair_d6d3da56cb7a46c9be171964f6fc88dd","name":"","value":""}],"headers":[],"authentication":{},"metaSortKey":-1740493912477,"isPrivate":false,"pathParameters":[],"afterResponseScript":"const response = insomnia.response;\nconst submissions = response.json();\n\ninsomnia.test('Status code is 200', () => {\n    insomnia.expect(response.code).to.equal(200);\n});\n\ninsomnia.test('Response is an array', () => {\n    insomnia.expect(Array.isArray(submissions)).to.be.equal(true);\n});\n\ninsomnia.test('Response contains exactly 1 submission', () => {\n    insomnia.expect(submissions).to.have.lengthOf(1);\n});\n\nconst submission = submissions[0];\ninsomnia.test('Submission has all required fields', () => {\n    insomnia.expect(submission).to.have.all.keys(\n        'submissionId',\n        'taskId',\n        'studentId',\n        'studentUsername',\n        'answer',\n        'maxScore'\n    );\n});\n\ninsomnia.test('Submission data is correct', () => {\n    insomnia.expect(submission.submissionId).to.equal(7);\n    insomnia.expect(submission.taskId).to.equal(3);\n    insomnia.expect(submission.studentId).to.equal(2);\n    insomnia.expect(submission.studentUsername).to.equal('student2');\n    insomnia.expect(submission.answer).to.equal('baza');\n    insomnia.expect(submission.maxScore).to.equal(25);\n});\n\ninsomnia.test('Fields have correct types', () => {\n    insomnia.expect(submission.submissionId).to.be.a('number');\n    insomnia.expect(submission.taskId).to.be.a('number');\n    insomnia.expect(submission.studentId).to.be.a('number');\n    insomnia.expect(submission.studentUsername).to.be.a('string');\n    insomnia.expect(submission.answer).to.be.a('string');\n    insomnia.expect(submission.maxScore).to.be.a('number');\n});\n\ninsomnia.test('Response time is reasonable', () => {\n    insomnia.expect(response.responseTime).to.be.below(500);\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_3f032b3a3dfb468d9e2431a2f4aa6459","parentId":"fld_56f02f971ae94cdebed93b6449bdf625","modified":1740579477946,"created":1740493912486,"url":"{{ _.base_url }}/api/certificates/course/1/pending","name":"Получение списка ожидающих запросов на сертификаты","description":"Возвращает список необработанных запросов на сертификаты для указанного курса","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1740493912486,"isPrivate":false,"pathParameters":[],"afterResponseScript":"const response = insomnia.response;\nconst requests = response.json();\n\ninsomnia.test('Status code is 200', () => {\n    insomnia.expect(response.code).to.equal(200);\n});\n\ninsomnia.test('Response is an array', () => {\n    insomnia.expect(Array.isArray(requests)).to.be.equal(true);\n});\n\ninsomnia.test('Response contains exactly 2 requests', () => {\n    insomnia.expect(requests).to.have.lengthOf(2);\n});\n\ninsomnia.test('Requests have all required fields', () => {\n    requests.forEach(request => {\n        insomnia.expect(request).to.have.all.keys(\n            'requestId',\n            'studentId',\n            'studentUsername',\n            'courseId',\n            'courseName',\n            'status'\n        );\n    });\n});\n\ninsomnia.test('First request data is correct', () => {\n    const firstRequest = requests[0];\n    insomnia.expect(firstRequest.requestId).to.equal(1);\n    insomnia.expect(firstRequest.studentId).to.equal(1);\n    insomnia.expect(firstRequest.studentUsername).to.equal('student1');\n    insomnia.expect(firstRequest.courseId).to.equal(1);\n    insomnia.expect(firstRequest.courseName).to.equal('Java Programming Basics');\n    insomnia.expect(firstRequest.status).to.equal('IN_PROGRESS');\n});\n\ninsomnia.test('Second request data is correct', () => {\n    const secondRequest = requests[1];\n    insomnia.expect(secondRequest.requestId).to.equal(2);\n    insomnia.expect(secondRequest.studentId).to.equal(2);\n    insomnia.expect(secondRequest.studentUsername).to.equal('student2');\n    insomnia.expect(secondRequest.courseId).to.equal(1);\n    insomnia.expect(secondRequest.courseName).to.equal('Java Programming Basics');\n    insomnia.expect(secondRequest.status).to.equal('IN_PROGRESS');\n});\n\ninsomnia.test('Fields have correct types', () => {\n    requests.forEach(request => {\n        insomnia.expect(request.requestId).to.be.a('number');\n        insomnia.expect(request.studentId).to.be.a('number');\n        insomnia.expect(request.studentUsername).to.be.a('string');\n        insomnia.expect(request.courseId).to.be.a('number');\n        insomnia.expect(request.courseName).to.be.a('string');\n        insomnia.expect(request.status).to.be.a('string');\n    });\n});\n\n\ninsomnia.test('Response time is reasonable', () => {\n    insomnia.expect(response.responseTime).to.be.below(500);\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_56f02f971ae94cdebed93b6449bdf625","parentId":"wrk_b87015e768ff4ae2a3ac5aee0e186765","modified":1740579477936,"created":1740493912472,"name":"Сертификаты","description":"API для управления сертификатами курсов","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1740493912472,"_type":"request_group"},{"_id":"req_da43c3986b6d4623b2cec33754e2a608","parentId":"fld_56f02f971ae94cdebed93b6449bdf625","modified":1740579477951,"created":1740493912485,"url":"{{ _.base_url }}/api/certificates/status","name":"Проверка статуса запроса на сертификат","description":"Возвращает текущий статус запроса на сертификат","method":"GET","body":{},"parameters":[{"disabled":false,"id":"pair_9e9ca4c956244d6a96e74353d51f0f8a","name":"userId","value":"1"},{"disabled":false,"id":"pair_a1e5f394f732477ba9a0383206eb9297","name":"courseId","value":"1"}],"headers":[],"authentication":{},"metaSortKey":-1740493912485,"isPrivate":false,"afterResponseScript":"const response = insomnia.response;\nconst body = response.json();\n\ninsomnia.test('Status code is 200', () => {\n    insomnia.expect(response.code).to.equal(200);\n});\n\ninsomnia.test('Response is a JSON object', () => {\n    insomnia.expect(body).to.be.an('object');\n});\n\ninsomnia.test('Response has all required fields', () => {\n    insomnia.expect(body).to.have.all.keys('success', 'message', 'status');\n});\n\ninsomnia.test('Success is true', () => {\n    insomnia.expect(body.success).to.be.equal(true);\n});\n\ninsomnia.test('Message indicates status retrieval', () => {\n    insomnia.expect(body.message).to.equal('Certificate request status retrieved');\n});\n\ninsomnia.test('Status is IN_PROGRESS', () => {\n    insomnia.expect(body.status).to.equal('IN_PROGRESS');\n});\n\ninsomnia.test('Fields have correct types', () => {\n    insomnia.expect(body.success).to.be.a('boolean');\n    insomnia.expect(body.message).to.be.a('string');\n    insomnia.expect(body.status).to.be.a('string');\n});\n\ninsomnia.test('Response time is reasonable', () => {\n    insomnia.expect(response.responseTime).to.be.below(500);\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_fa1856483c6042689bfb4f56dbaee8b9","parentId":"fld_56f02f971ae94cdebed93b6449bdf625","modified":1740579477953,"created":1740493912480,"url":"{{ _.base_url }}/api/certificates/request","name":"Запрос на выдачу сертификата","description":"Создает запрос на получение сертификата для указанного пользователя и курса","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"userId\": 3,\n  \"courseId\": 1\n}"},"parameters":[],"headers":[{"disabled":false,"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1740493912483,"isPrivate":false,"afterResponseScript":"const response = insomnia.response;\nconst body = response.json();\n\ninsomnia.test('Status code is 400', () => {\n    insomnia.expect(response.code).to.equal(400);\n});\n\ninsomnia.test('Response is a JSON object', () => {\n    insomnia.expect(body).to.be.an('object');\n});\n\ninsomnia.test('Response has all required fields', () => {\n    insomnia.expect(body).to.have.all.keys('success', 'message', 'score');\n});\n\ninsomnia.test('Success is false', () => {\n    insomnia.expect(body.success).to.be.equal(false);\n});\n\ninsomnia.test('Message indicates incomplete course', () => {\n    insomnia.expect(body.message).to.equal('Not all tasks are completed with passing score');\n});\n\ninsomnia.test('Score is null', () => {\n    insomnia.expect(body.score).to.be.equal(null);\n});\n\ninsomnia.test('Fields have correct types', () => {\n    insomnia.expect(body.success).to.be.a('boolean');\n    insomnia.expect(body.message).to.be.a('string');\n    insomnia.expect(body.score).to.be.equal(null);\n});\n\ninsomnia.test('Response time is reasonable', () => {\n    insomnia.expect(response.responseTime).to.be.below(500);\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_130ca590ee5e459cb6bc1c28d577690b","parentId":"fld_56f02f971ae94cdebed93b6449bdf625","modified":1740579477941,"created":1740493912481,"url":"{{ _.base_url }}/api/certificates/process","name":"Обработка запроса на сертификат","description":"Позволяет одобрить или отклонить запрос на выдачу сертификата","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"requestId\": 2,\n  \"approved\": true\n}"},"parameters":[],"headers":[{"disabled":false,"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1740493912481,"isPrivate":false,"afterResponseScript":"const response = insomnia.response;\nconst body = response.json();\n\ninsomnia.test('Status code is 200', () => {\n    insomnia.expect(response.code).to.equal(200);\n});\n\ninsomnia.test('Response is a JSON object', () => {\n    insomnia.expect(body).to.be.an('object');\n});\n\ninsomnia.test('Response has all required fields', () => {\n    insomnia.expect(body).to.have.all.keys('success', 'message', 'status');\n});\n\ninsomnia.test('Success is true', () => {\n    insomnia.expect(body.success).to.be.equal(true);\n});\n\ninsomnia.test('Message indicates approval', () => {\n    insomnia.expect(body.message).to.equal('Certificate request approved');\n});\n\ninsomnia.test('Status is APPROVED', () => {\n    insomnia.expect(body.status).to.equal('APPROVED');\n});\n\ninsomnia.test('Fields have correct types', () => {\n    insomnia.expect(body.success).to.be.a('boolean');\n    insomnia.expect(body.message).to.be.a('string');\n    insomnia.expect(body.status).to.be.a('string');\n});\n\ninsomnia.test('Status is a valid CertificateRequestStatus', () => {\n    const validStatuses = ['IN_PROGRESS', 'APPROVED', 'REJECTED', 'CANCELLED'];\n    insomnia.expect(validStatuses).to.include(body.status);\n});\n\ninsomnia.test('Response time is reasonable', () => {\n    insomnia.expect(response.responseTime).to.be.below(500);\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_60c7ff0f9c794cd481d192949e648a0d","parentId":"fld_56f02f971ae94cdebed93b6449bdf625","modified":1740579477947,"created":1740572906639,"url":"{{ _.base_url }}/api/certificates/course/1/pending","name":"Получение списка ожидающих запросов на сертификаты (после обработки запроса на сертификат)","description":"Возвращает список необработанных запросов на сертификаты для указанного курса","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1740493912381,"isPrivate":false,"pathParameters":[],"afterResponseScript":"const response = insomnia.response;\nconst requests = response.json();\n\ninsomnia.test('Status code is 200', () => {\n    insomnia.expect(response.code).to.equal(200);\n});\n\ninsomnia.test('Response is an array', () => {\n    insomnia.expect(Array.isArray(requests)).to.be.equal(true);\n});\n\ninsomnia.test('Response contains exactly 2 requests', () => {\n    insomnia.expect(requests).to.have.lengthOf(1);\n});\n\ninsomnia.test('Requests have all required fields', () => {\n    requests.forEach(request => {\n        insomnia.expect(request).to.have.all.keys(\n            'requestId',\n            'studentId',\n            'studentUsername',\n            'courseId',\n            'courseName',\n            'status'\n        );\n    });\n});\n\ninsomnia.test('First request data is correct', () => {\n    const firstRequest = requests[0];\n    insomnia.expect(firstRequest.requestId).to.equal(1);\n    insomnia.expect(firstRequest.studentId).to.equal(1);\n    insomnia.expect(firstRequest.studentUsername).to.equal('student1');\n    insomnia.expect(firstRequest.courseId).to.equal(1);\n    insomnia.expect(firstRequest.courseName).to.equal('Java Programming Basics');\n    insomnia.expect(firstRequest.status).to.equal('IN_PROGRESS');\n});\n\ninsomnia.test('Fields have correct types', () => {\n    requests.forEach(request => {\n        insomnia.expect(request.requestId).to.be.a('number');\n        insomnia.expect(request.studentId).to.be.a('number');\n        insomnia.expect(request.studentUsername).to.be.a('string');\n        insomnia.expect(request.courseId).to.be.a('number');\n        insomnia.expect(request.courseName).to.be.a('string');\n        insomnia.expect(request.status).to.be.a('string');\n    });\n});\n\ninsomnia.test('Response time is reasonable', () => {\n    insomnia.expect(response.responseTime).to.be.below(500);\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_9fc972e4f279783c26803ec47a7ae2200dc88eea","parentId":"wrk_b87015e768ff4ae2a3ac5aee0e186765","modified":1740579477935,"created":1740493580210,"name":"Base Environment","data":{"base_url":"{{ _.scheme }}://{{ _.host }}{{ _.base_path }}"},"dataPropertyOrder":{"&":["base_url"]},"color":null,"isPrivate":false,"metaSortKey":1740493580210,"environmentType":"kv","kvPairData":[{"enabled":true,"id":"envPair_d0fe9e8be36c4862bed05e9f7175b80a","name":"base_url","type":"str","value":"http://localhost:8080/"}],"_type":"environment"},{"_id":"jar_9fc972e4f279783c26803ec47a7ae2200dc88eea","parentId":"wrk_b87015e768ff4ae2a3ac5aee0e186765","modified":1740579478127,"created":1740579478127,"name":"Default Jar","cookies":[],"_type":"cookie_jar"},{"_id":"env_045556f42aae4c2c8a22df803cf7589d","parentId":"env_9fc972e4f279783c26803ec47a7ae2200dc88eea","modified":1740579477933,"created":1740493912470,"name":"OpenAPI env localhost:8000","data":{"base_path":"","host":"localhost:8000","scheme":"http"},"dataPropertyOrder":{"&":["base_path","host","scheme"]},"color":null,"isPrivate":false,"metaSortKey":1740493912470,"environmentType":"kv","kvPairData":[{"enabled":true,"id":"envPair_8073b220b2754335a994c902cc3c9164","name":"base_path","type":"str","value":""},{"enabled":true,"id":"envPair_61416ed73506489a9a7fa8074ae89b2a","name":"host","type":"str","value":"localhost:8000"},{"enabled":true,"id":"envPair_8b0bf84af0674f84a0064e8f8d447846","name":"scheme","type":"str","value":"http"}],"_type":"environment"}]}